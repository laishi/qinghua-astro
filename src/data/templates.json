---
import astroLogo from "../assets/astro.svg";
import background from "../assets/background.svg";

// 数据部分：定义模板数组
const templates = [
  "01-add-life-health-fitness-free-bootstrap-html5-template",
  "02-reveal",
  "03-agile-agency-free-bootstrap-web-template",
  "04-amaze-photography-bootstrap-html5-template",
  "05-aroma-beauty-and-spa-responsive-bootstrap-template",
  "06-avenger-multi-purpose-responsive-html5-bootstrap-template",
  "07-b-school-free-education-html5-website-template",
  "08-beauty-salon-bootstrap-html5-template",
  "09-brand-html5-app-landing-page-responsive-web-template",
  "10-businessline-corporate-portfolio-bootstrap-responsive-web-template",
  "11-businessr-corporate-bootstrap-responsive-web-template",
  "12-car-repair-html5-bootstrap-template",
  "13-car-zone-automobile-bootstrap-responsive-web-template",
  "14-city-square-bootstrap-responsive-web-template",
  "15-cloud-hosting-free-bootstrap-responsive-website-template",
  "16-clouds-html5-multipurpose-landing-page-template",
  "17-coffee-shop-free-html5-template",
  "18-creative-free-responsive-html5-business-template",
  "19-darktouch-corporate-portfolio-bootstrap-responsive-web-template",
  "20-delite-music-html5-bootstrap-responsive-web-template",
  "21-eat-restaurant-bootstrap-html5-template",
  "22-elegant-free-multi-purpose-bootstrap-responsive-template",
  "23-enlive-corporate-free-html5-bootstrap-web-template",
  "24-fit-healthy-fitness-and-gym-html5-bootstrap-theme",
  "25-fitness-zone-html5-bootstrap-responsive-web-template",
  "26-frames-corporate-bootstrap-free-html5-template",
  "27-free-bootstrap-template-real-estate-my-home",
  "28-free-bootstrap-template-restaurant-website-treehut",
  "29-free-bootstrap-template-rockline-business",
  "30-free-portfolio-html5-responsive-website-sam",
  "getdoctor-free-bootstrap-responsive-website-template",
  "golden-hotel-free-html5-bootstrap-web-template",
  "grand-free-bootstrap-responsive-website-template",
  "green-corp-flat-free-responsive-mobile-website",
  "iam-html5-responsive-portfolio-resume-template",
  "iclick-photography-bootstrap-free-website-template",
  "idata-hosting-free-bootstrap-responsive-website-template",
  "ideal-interior-design-free-bootstrap-website-template",
  "john-bootstrap-one-page-html5-free-resume-template",
  "johndoe-portfolio-resume-bootstrap-template",
  "line-free-app-landing-page-responsive-web-template",
  "lovely-wedding-bootstrap-free-website-template",
  "me-resume-personal-portfolio-responsive-template",
  "mobile-app-free-one-page-responsive-html5-landing-page",
  "relax-interior-free-bootstrap-responsive-website-template",
  "rocket-business-bootstrap-free-responsive-web-theme",
  "skytouch-onepage-bootstrap-responsive-web-template",
  "smart-interior-designs-html5-bootstrap-web-template",
  "speed-hosting-bootstrap-free-html5-template"
];
---

<!-- HTML 部分 -->
<section id="temp">
  <div class="pageSlider" id="pageSlider"></div>
</section>

<!-- Script 部分 -->
<script>
  class SliderDetailGrid {
    constructor() {
      this.rootUrl = window.location.origin + window.location.pathname;
      this.templates = templates.slice(0, 12);
      this.tempPath = "./assets/qinghua-template/spa/";
      this.tempLink = "./assets/pages/temp.html";
      this.mainPage = document.querySelector(".mainPage");
      this.pageSlider = document.getElementById("pageSlider");
      this.detailGrids = null;
      this.detailPage = null;
      this.endLink = `<a href="${this.tempLink}"> ➤ </a>`;
      this.state = { viewer: "mainView", detailPage: {}, detailGrid: {} };
      this.init();
    }

    init() {
      this.reconfig();
      this.createGridPage();
      this.createDetailPage();
      this.createDetailGrids();
      this.navEvents();
      this.bindEvents();
    }

    reconfig() {
      if (this.rootUrl.includes("temp.html")) {
        console.log("subpath路径包含 pages:", this.rootUrl);
        this.templates = templates;
        this.endLink = '<a href="/"> < 回到首页 </a>';
      }
      if (this.root navigational.includes("pages")) {
        const headerTitle = document.querySelector(".header-content");
        headerTitle.style.height = "30vh";
      }
    }

    bindEvents() {
      window.addEventListener("resize", () => {
        this.detailGrids.innerHTML = "";
        this.createDetailGrids();
      });
    }

    navEvents() {
      window.addEventListener("popstate", this.handlePopState.bind(this));
      window.addEventListener("hashchange", () => this.onHashChange(this));
      this.onHashChange();
    }

    setState(update) {
      this.state = { ...this.state, ...update };
    }

    setDataset(el, data) {
      for (const [key, value] of Object.entries(data)) {
        el.dataset[key] = value;
      }
    }

    createGridPage() {
      const headerText = document.createElement("div");
      headerText.classList.add("headerText");
      headerText.innerHTML = "模版使用的行业";

      const homeHeader = document.createElement("div");
      homeHeader.classList.add("homeHeader");
      homeHeader.appendChild(headerText);

      const gridPage = document.createElement("div");
      gridPage.id = "gridPage";
      gridPage.classList.add("gridPage");
      gridPage.appendChild(homeHeader);

      const detailGrids = document.createElement("div");
      detailGrids.id = "detailGrids";
      detailGrids.classList.add("detailGrids");
      this.detailGrids = detailGrids;
      gridPage.appendChild(detailGrids);

      this.pageSlider.appendChild(gridPage);
    }

    createDetailPage() {
      const detailPage = document.createElement("div");
      detailPage.id = "detailPage";
      detailPage.classList.add("detailPage");
      this.detailPage = detailPage;
      detailPage.addEventListener("click", () => this.navigateTo("mainView"));
      this.pageSlider.appendChild(detailPage);
    }

    circleLoaderIframe(appenddiv, src) {
      if (!(appenddiv instanceof HTMLElement))
        throw new Error("appenddiv 必须是有效的 DOM 元素");

      appenddiv.querySelector("#cicleloader-container")?.remove();

      const container = document.createElement("div");
      container.id = "cicleloader-container";

      const rippleLoader = document.createElement("div");
      rippleLoader.className = "ripple-loader";

      const bubbleLoader = document.createElement("div");
      bubbleLoader.className = "bubble-loader";

      const loadingText = document.createElement("div");
      loadingText.className = "loading-text";
      loadingText.textContent = "加载中";

      const backText = document.createElement("h3");
      backText.className = "btnText";
      backText.innerHTML = "<";

      const iframe = document.createElement("iframe");
      iframe.src = src;

      bubbleLoader.appendChild(loadingText);
      container.append(rippleLoader, bubbleLoader, iframe);
      appenddiv.appendChild(container);

      bubbleLoader.addEventListener("click", () => {
        this.goToMain();
      });

      iframe.addEventListener("load", () => {
        rippleLoader.classList.add("active");
        iframe.classList.add("loaded");
        rippleLoader.addEventListener(
          "animationend",
          () => {
            container.classList.add("loaded");
            rippleLoader.remove();
            loadingText.remove();
            bubbleLoader.classList.add("loaded");
            bubbleLoader.appendChild(backText);
          },
          { once: true },
        );
      });

      setTimeout(() => {
        if (!container.classList.contains("loaded")) {
          container.classList.add("loaded");
          rippleLoader.classList.add("active");
          iframe.classList.add("loaded");
          rippleLoader.addEventListener(
            "animationend",
            () => {
              rippleLoader.remove();
              loadingText.remove();
              bubbleLoader.classList.add("loaded");
              bubbleLoader.appendChild(backText);
            },
            { once: true },
          );
        }
      }, 1000);

      iframe.addEventListener("error", () => {
        container.style.background =
          "radial-gradient(circle, #ff4d4d, #b32424)";
        container.innerHTML = `<div class="error-text">加载失败: ${src}</div>`;
      });
    }

    injectImageIntoGrid(grid, linkurl, imgurl, info) {
      const link = document.createElement("a");
      link.href = linkurl;
      link.addEventListener("click", (e) => e.preventDefault());

      const img = document.createElement("img");
      img.src = imgurl;
      img.loading = "lazy";
      link.appendChild(img);

      const imgMask = document.createElement("div");
      imgMask.className = "imgMask";

      const gridInfo = document.createElement("div");
      gridInfo.className = "gridInfo";
      const keywords = info.split("/").slice(-2, -1)[0].split("-");
      keywords.forEach((keyword) => {
        const keywordDiv = document.createElement("div");
        keywordDiv.className = "infoKeywords";
        keywordDiv.innerHTML = `<h3>${keyword}</h3>`;
        gridInfo.appendChild(keywordDiv);
      });

      grid.appendChild(link);
      grid.appendChild(gridInfo);
      grid.appendChild(imgMask);
    }

    createDetailGrids() {
      this.detailGrids.innerHTML = "";

      const totalGrids = this.templates.length + 1;
      const gridsWidth = this.detailGrids.clientWidth;
      const gridGap = parseFloat(getComputedStyle(this.detailGrids).gap) || 16;
      const perRow = Math.min(Math.max(Math.floor(gridsWidth / 300), 2), 5);
      const gridWidth = (gridsWidth - (perRow - 1) * gridGap) / perRow;
      const ratio = 1.3;

      let count = 1;
      for (let i = 0; i < Math.ceil(totalGrids / perRow); i++) {
        const gridRow = document.createElement("div");
        gridRow.classList.add("gridsrow");

        for (let j = 0; j < perRow && count <= totalGrids; j++, count++) {
          const detailGrid = document.createElement("div");
          detailGrid.classList.add("detailGrid", `grid-${i + 1}-${j + 1}`);
          detailGrid.style.width = gridWidth + "px";
          detailGrid.style.height = gridWidth * ratio + "px";

          if (count === totalGrids) {
            detailGrid.classList.add("enddetailGrid");
            detailGrid.innerHTML = this.endLink;
          } else {
            const index = count - 1;
            const linkurl = `${this.tempPath}${this.templates[index]}/index.html`;
            const imgurl = `${this.tempPath}${this.templates[index]}/screenshot.png`;

            this.injectImageIntoGrid(detailGrid, linkurl, imgurl, linkurl);

            detailGrid.addEventListener("click", (e) => {
              const clickX = e.clientX;
              const enterFrom =
                clickX < window.innerWidth / 2 ? "left" : "right";
              sessionStorage.setItem("lastEnterFrom", enterFrom);

              this.setState({
                viewer: "detailView",
                detailGrid: {
                  index,
                  perRow,
                  totalGrids,
                  imgurl,
                  linkurl,
                  enterFrom,
                },
              });
              this.navigateTo("detailView");
            });
          }

          gridRow.appendChild(detailGrid);
        }
        this.detailGrids.appendChild(gridRow);
      }
    }

    navigateTo(view) {
      if (view === "detailView") {
        const { index, enterFrom, ...rest } = this.state.detailGrid;
        const hash = `#detailView/template/${index + 1}`;
        history.pushState({ view, ...rest, index, enterFrom }, "", hash);
        this.goToDetail();
      } else {
        history.pushState({ view: "mainView" }, "", this.rootUrl);
        this.goToMain();
      }
    }

    goToDetail() {
      this.detailPage.style.opacity = 1;
      const { index, perRow, imgurl, linkurl, enterFrom } =
        this.state.detailGrid;

      this.circleLoaderIframe(this.detailPage, linkurl);
      document.body.style.overflow = "hidden";

      this.detailPage.style.transform = `translateY(${window.scrollY}px)`;

      if (enterFrom === "left") {
        this.detailPage.style.left = "-100%";
        this.mainPage.style.transform = "translateX(100%)";
      } else {
        this.detailPage.style.left = "100%";
        this.mainPage.style.transform = "translateX(-100%)";
      }
    }

    goToMain() {
      this.detailPage.style.opacity = 0;
      this.setState({ viewer: "mainView" });
      document.body.style.overflow = "";

      this.mainPage.style.transform = "translateX(0)";
      this.detailPage.style.transform = "translateY(0)";
    }

    handlePopState(event) {
      const state = event.state;
      if (!state || state.view === "mainView") {
        this.goToMain();
      } else if (state.view === "detailView") {
        const enterFrom =
          state.enterFrom || sessionStorage.getItem("lastEnterFrom") || "right";
        this.setState({
          viewer: "detailView",
          detailGrid: { ...state, enterFrom },
        });
        this.goToDetail();
      }
    }

    onHashChange() {
      const hash = location.hash.slice(1);
      const parts = hash.split("/");
      if (parts[0] !== "detailView") {
        this.goToMain();
        return;
      }

      const indexStr = parts[2];
      const index = parseInt(indexStr, 10) - 1;

      if (isNaN(index) || index < 0 || index >= this.templates.length) {
        this.goToMain();
        return;
      }

      const templateName = this.templates[index];
      const linkurl = `${this.tempPath}${templateName}/index.html`;
      const imgurl = `${this.tempPath}${templateName}/screenshot.png`;
      const perRow = Math.min(
        Math.max(Math.floor(this.detailGrids.clientWidth / 300), 2),
        5,
      );
      const totalGrids = this.templates.length + 1;

      const enterFrom = sessionStorage.getItem("lastEnterFrom") || "right";
      this.setState({
        viewer: "detailView",
        detailGrid: { index, perRow, totalGrids, imgurl, linkurl, enterFrom },
      });

      this.goToDetail();
    }
  }

  const gallery = new SliderDetailGrid();
  window.onload = function () {};
</script>

<!-- Style 部分 -->
<style>
  .pageSlider {
    position: relative;
    width: 100%;
    min-height: 100vh;
    overflow: hidden;
  }

  .gridPage {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
  }

  .homeHeader {
    text-align: center;
    margin-bottom: 20px;
  }

  .headerText {
    font-size: 2rem;
    font-weight: bold;
    color: #333;
  }

  .detailGrids {
    display: grid;
    gap: 16px;
    width: 100%;
    max-width: 1200px;
  }

  .gridsrow {
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
  }

  .detailGrid {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .detailGrid:hover {
    transform: scale(1.05);
  }

  .enddetailGrid {
    display: flex;
    align-items: center;
    justify-content: center;
    background: #007bff;
    color: white;
    font-size: 1.5rem;
    font-weight: bold;
  }

  .enddetailGrid a {
    color: white;
    text-decoration: none;
  }

  .imgMask {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.3);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .detailGrid:hover .imgMask {
    opacity: 1;
  }

  .gridInfo {
    position: absolute;
    bottom: 10px;
    left: 10px;
    color: white;
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .infoKeywords h3 {
    background: rgba(0, 0, 0, 0.7);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9rem;
    margin: 0;
  }

  .detailPage {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: white;
    z-index: 1000;
    transition: opacity 0.3s ease, left 0.5s ease;
    opacity: 0;
  }

  #cicleloader-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .ripple-loader {
    position: absolute;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle, #007bff, #0056b3);
    opacity: 1;
    transition: opacity 0.5s ease;
  }

  .ripple-loader.active {
    opacity: 0;
  }

  .bubble-loader {
    position: absolute;
    top: 20px;
    left: 20px;
    width: 50px;
    height: 50px;
    background: #007bff;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .bubble-loader.loaded {
    background: #28a745;
  }

  .loading-text {
    font-size: 1rem;
    color: white;
  }

  .btnText {
    font-size: 1.5rem;
    margin: 0;
  }

  iframe {
    width: 100%;
    height: 100%;
    border: none;
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  iframe.loaded {
    opacity: 1;
  }

  .error-text {
    color: white;
    font-size: 1.2rem;
    text-align: center;
  }
</style>