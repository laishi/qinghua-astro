---
const { height = '80vh', title = '青花卓越' } = Astro.props;

const headerData = {
  logo: "/assets/images/icons/mstile-310x310.png",
  title: title,
  subtitle: "网站设计塑形象 程序开发筑根基 SEO优化引流量 运维托管保无忧",
  contact: {
    phone: "13640566324 18883919122",
    email: "504677424@qq.com",
  },
  bgImage: "/assets/images/bg.png",
  girlImage: "/assets/images/girl.png",
};
---

<!-- HeaderParallax.astro --><!-- 带视差背景和动画人物的头部组件 --><!-- data 部分 --><!-- html 部分 -->
<div class="header-content" style={`--header-height: ${height}`}>
  <div
    id="parallaxbg"
    class="parallaxbg"
    style={`background-image: linear-gradient(60deg, rgba(36, 23, 87, 0.9), rgba(10, 87, 97, 0.9)), url(${headerData.bgImage})`}
  >
  </div>
  <div class="girl" style={`background-image: url(${headerData.girlImage})`}>
  </div>
  <div class="header-title">
    <div class="headerLogo">
      <img src={headerData.logo} alt="青花卓越 Logo" />
    </div>
    <div class="headerText">
      <h1>{headerData.title}</h1>
      <h3>{headerData.subtitle}</h3>
      <h3>
        <i class="fas fa-phone-alt"></i>
        {headerData.contact.phone} &nbsp;&nbsp; &nbsp;
        <i class="fas fa-envelope"></i>
        {headerData.contact.email}
      </h3>
    </div>
  </div>

  <slot name="waves" />
  <slot name="menu" />

</div>


<!-- css 部分 -->
<style>
  :root { 
    --log-size: 6em;
  }

  .header-content {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: var(--header-height);
    position: relative;
    text-align: center;
    color: white;
    background-size: cover;
    background-position: center;
    overflow: hidden;
  }

  .header-content .parallaxbg {
    position: absolute;
    width: 110%;
    height: 110%;
    background-size: cover;
    background-position: center;
    will-change: transform;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: transform 0.1s ease-out;
  }

  .header-content .girl {
    position: absolute;
    bottom: 0;
    width: 38%;
    height: 38vh;
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
    will-change: transform;
    transition: transform 0.1s ease-out;
    animation: girlLook 2s ease-in-out infinite alternate;
    animation-delay: -5s;
    opacity: 0.9;
    transform: translateY(-3%);
  }

  @keyframes girlLook {
    to {
      transform: translateY(3%);
    }
  }

  .header-content .header-title {
    position: absolute;
    width: 100%;
    height: var(--header-height);
    background-color: rgba(0, 0, 0, 0.308);
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  .header-content .header-title .headerLogo {
    position: absolute;
    width: var(--log-size);
    height: var(--log-size);
    top: 1em;
  }

  .header-content .header-title .headerLogo img {
    width: 100%;
    height: 100%;
  }

  .header-content .header-title .headerText {
    position: absolute;
    top: 8em;
    text-align: center;
  }

  .header-content .header-title .headerText h1 {
    font-size: 2em;
    margin-bottom: 1em;
  }

  .header-content .header-title .headerText h3 {
    font-size: 1.5em;
    line-height: 1.5em;
  }

  @property --＠color-1 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(98 100% 62%);
  }

  @property --＠color-2 {
    syntax: "<color>";
    inherits: false;
    initial-value: hsl(204 100% 59%);
  }

  @keyframes gradient-change {
    to {
      --＠color-1: hsl(210 100% 59%);
      --＠color-2: hsl(310 100% 59%);
    }
  }

  .header-content .headerText h1,
  .header-content .headerText h3 {
    animation: gradient-change 2s linear infinite alternate;
    background: linear-gradient(
      to right in oklch,
      var(--＠color-1),
      var(--＠color-2)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    color: transparent;
    margin: 0;
    text-wrap: balance;
  }

  @layer demo.support {
    .header-content .headerText h1 {
      font-size: 5vmin;
      line-height: 1.25cap;
    }

    .header-content .headerText h3 {
      font-size: min(200%, 4vmin);
      line-height: 1.5;
    }

    .header-content .headerText h3 i {
      margin-right: 0.5em;
    }
  }
</style>

<!-- script 部分 -->
<script>
  /**
   * 增强版视差效果函数
   * @param {HTMLElement} element - 要应用视差的元素
   * @param {Object} [options] - 配置选项
   * @param {number} [options.intensity=0.1] - 视差强度 (0-1)
   * @param {boolean} [options.center=false] - 是否强制居中
   * @param {string} [options.axis='xy'] - 视差轴 ('x', 'y' 或 'xy')
   */
  function applyParallax(element, options = {}) {
    const config = {
      intensity: 0.1,
      center: false,
      axis: "xy",
      ...options,
    };

    if (!element || !(element instanceof HTMLElement)) {
      console.error("无效的元素");
      return null;
    }

    const initialTransform = window.getComputedStyle(element).transform;
    const initialPosition = {
      left: element.style.left,
      top: element.style.top,
      bottom: element.style.bottom,
    };

    let rafId = null;
    let lastMove = { x: 0, y: 0 };

    function getMaxMovement() {
      const parent = element.parentElement || document.documentElement;
      return {
        x: (element.offsetWidth - parent.offsetWidth) / 2,
        y: (element.offsetHeight - parent.offsetHeight) / 2,
      };
    }

    function updatePosition() {
      const max = getMaxMovement();
      const moveX = config.axis.includes("x")
        ? lastMove.x * max.x * config.intensity
        : 0;
      const moveY = config.axis.includes("y")
        ? lastMove.y * max.y * config.intensity
        : 0;

      let transform = initialTransform === "none" ? "" : initialTransform;
      if (config.center) {
        transform = `translate(-50%, -50%) translate(${-moveX}px, ${-moveY}px)`;
      } else {
        transform += ` translate(${-moveX}px, ${-moveY}px)`;
      }
      element.style.transform = transform;
      rafId = null;
    }

    function handleMove(e) {
      const clientX = e.clientX ?? e.touches?.[0]?.clientX;
      const clientY = e.clientY ?? e.touches?.[0]?.clientY;

      if (clientX === undefined || clientY === undefined) return;

      lastMove = {
        x: (clientX / window.innerWidth - 0.5) * 2,
        y: (clientY / window.innerHeight - 0.5) * 2,
      };

      if (!rafId) {
        rafId = requestAnimationFrame(updatePosition);
      }
    }

    function handleResize() {
      if (rafId) cancelAnimationFrame(rafId);
      updatePosition();
    }

    window.addEventListener("mousemove", handleMove);
    window.addEventListener("touchmove", handleMove, { passive: true });
    window.addEventListener("resize", handleResize);

    return function cleanup() {
      window.removeEventListener("mousemove", handleMove);
      window.removeEventListener("touchmove", handleMove);
      window.removeEventListener("resize", handleResize);
      if (rafId) cancelAnimationFrame(rafId);
      element.style.transform = initialTransform;
    };
  }

  document.addEventListener("DOMContentLoaded", function () {
    const parallaxBg = document.querySelector(".parallaxbg");
    const girl = document.querySelector(".girl");

    if (parallaxBg) {
      applyParallax(parallaxBg, {
        intensity: 0.5,
        center: true,
        axis: "xy",
      });
    }

    if (girl) {
      applyParallax(girl, {
        intensity: 0.05,
        center: false,
        axis: "x",
      });
    }
  });
</script>
